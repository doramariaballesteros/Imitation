# This code allows to obtain some statistics of the audios as well as their histograms.
# Author: Dora Maria Ballesteros.
# 26/05/2021.

from scipy.io import wavfile
import IPython
import numpy as np
import scipy.stats as stats
from scipy.stats import kurtosis, skew, entropy
import matplotlib.pyplot as plt

# 1. Load the audios
sr1, audio1 = wavfile.read('/content/audio1.wav')
IPython.display.Audio(audio1, rate=sr1)

sr2, audio2 = wavfile.read('/content/audio2.wav')
IPython.display.Audio(audio2, rate=sr2)

sr3, audio3 = wavfile.read('/content/audio3.wav')
IPython.display.Audio(audio3, rate=sr3)


# 2. Scaling the audios
audio1=audio1/(np.max(abs(audio1)))
audio2=audio2/(np.max(abs(audio2)))
audio3=audio3/(np.max(abs(audio3)))

# 3. Obtain the statistics
# avg is the average
# std is the standard devitation
# kur is the kurtosis (measure of how pointed the distribution of the data is, relative to a normal distribution)
# sk is the skewness (measure of symmetry)

avg1 = np.mean(audio1)
avg2 = np.mean(audio2)
avg3 = np.mean(audio3)

std1 = np.std(audio1)
std2 = np.std(audio2)
std3 = np.std(audio3)

kur1 = kurtosis(audio1, fisher=False)
kur2 = kurtosis(audio2, fisher=False)
kur3 = kurtosis(audio3, fisher=False)

sk1 = skew(audio1)
sk2 = skew(audio2)
sk3 = skew(audio3)

print('avg1 is:', avg1)
print('avg2 is:', avg2)
print('avg3 is:', avg3)

print('std1 is:', std1)
print('std2 is:', std2)
print('std3 is:', std3)

print('kurtosis1 is:', kur1)
print('kurtosis2 is:', kur2)
print('kurtosis3 is:', kur3)

print('skewness1 is:', sk1)
print('skewness2 is:', sk2)
print('skewness3 is:', sk3)

# 4. Plot the histograms and print their entropy
# et is the entropy of the audios (measure of uncertainty)

# Histogram and entropy of audio1
fig, axs = plt.subplots(3)
plt.rcParams["figure.figsize"] = (18,16)
n, bins, patches = axs[0].hist(x=audio1, bins=256, color='#0504aa')


p =n/sum(n)
log=np.zeros(len(n))
for i in range(len(n)):
  if n[i]>0:
    log[i]= -np.log2(p[i])*p[i]


et1 = sum(log)
print('entropy1 is:', et1)

# Histogram and entropy of audio2

n, bins, patches = axs[1].hist(x=audio2, bins=256, color='#0504aa')
plt.rcParams["figure.figsize"] = (18,16)

p =n/sum(n)
log=np.zeros(len(n))
for i in range(len(n)):
  if n[i]>0:
    log[i]= -np.log2(p[i])*p[i]


et2 = sum(log)
print('entropy2 is:', et2)

# Histogram and entropy of audio3
n, bins, patches = axs[2].hist(x=audio3, bins=256, color='#0504aa')
plt.rcParams["figure.figsize"] = (18,16)

p =n/sum(n)
log=np.zeros(len(n))
for i in range(len(n)):
  if n[i]>0:
    log[i]= -np.log2(p[i])*p[i]


et3 = sum(log)
print('entropy3 is:', et3)
